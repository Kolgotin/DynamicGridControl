using DevExpress.Xpf.Core;
using DevExpress.Xpf.Editors.Settings;
using DevExpress.Xpf.Grid;
using DevexpressTestModule.Models;
using DevexpressTestModule.ViewModels;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;

namespace DevexpressTestModule.Views
{
    /// <summary>
    /// Interaction logic for DynamicTableView.xaml
    /// </summary>
    public partial class DynamicTableView : UserControl
    {
        public DynamicTableView()
        {
            InitializeComponent();
        }

        private void GridControl_AutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            foreach (GridColumn column in DynamicGridControl.Columns)
            {
                column.CellTemplate = MainGrid.Resources["CellDataTemplate"] as DataTemplate;
                column.Style = MainGrid.Resources["CellEditorStyle"] as Style;
                column.CellTemplateSelector = MainGrid.Resources["cellTS"] as DataTemplateSelector;
                column.ColumnFilterMode = ColumnFilterMode.DisplayText;
            }
        }
    }

    public class MyTemplateSelector : DataTemplateSelector
    {
        public override DataTemplate SelectTemplate(object item, DependencyObject container)
        {
            CellEditor cellEditor = container as CellEditor;
            EditGridCellData cellData = item as EditGridCellData;
            TableView view = cellData.View as TableView;

            TryMerge(cellEditor, cellData, view.Grid.GetRowVisibleIndexByHandle(cellData.RowData.RowHandle.Value));
            return base.SelectTemplate(item, container);
        }

        protected bool TryMerge(CellEditor container, EditGridCellData cellData, int curIndex)
        {
            TableView view = (TableView)cellData.View;
            GridControl grid = view.Grid;

            var curI = cellData.Column.VisibleIndex + 1;
            double width = 0;
            for (int i = curI; i < view.VisibleColumns.Count; i++)
            {
                var c = view.VisibleColumns[i-1];
                var a = grid.GetCellValue(curIndex, c) as DynamicTableModel;
                if (a.IsBorerNull)
                    width += c.ActualDataWidth;
                else
                    break;
            }
            container.Margin = new Thickness(0, 0, -width, 0);
            return true;
        }
    }
    public class NegativeConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            return -(int)value;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            return null;
        }
    }
    public class MyStackVisibleIndexPanel : StackVisibleIndexPanel
    {
        protected override Size MeasureSortedChildrenOverride(Size availableSize, IList<UIElement> sortedChildren)
        {
            Size origAvalSize = availableSize;
            Size baseMeasureSize = base.MeasureSortedChildrenOverride(availableSize, sortedChildren);
            if (origAvalSize.Width < baseMeasureSize.Width)
                baseMeasureSize.Width = origAvalSize.Width;
            return baseMeasureSize;
        }

    }
}
